package class_0113_16_람다;

public class TestMain {
	public static void main(String[] args) {
		
		/*
		 * 		람다(lamda)식
		 * 	1. 함수형 프로그래밍 언어에 적합한 표현식. (JDK 1.8)
		 * 
		 * 		* 함수형 프로그래밍 (functinal Programming)
		 * 		==> 함수기반으로 프로그래밍을 하자.
		 * 		==> 자바는 최소단위 클래스이다.
		 * 			따라서 하나의 메소드가 필요한 경우에도 반드시 클래스가 필요하다. (불필요한 클래스를 매번 생성해야한다. ==> 비효율적)
		 * 			
		 * 			해결 : 메소드만 집중해서 표현할 수 있는 람다식을 이용
		 * 
		 * 	2. 람다식의 특징
		 * 
		 * 		- 객체가 아닌 기능적인 코드(메소드)에 집중하자.
		 * 		- 간결한 표현식
		 * 		- 하나의 메소드를 가진 인터페이스 사용시 일반적으로 람다식이 사용된다.
		 * 		- 특정 인터페이스가 하나의 추상메소드를 가지는 것을 강제할 방법으로 @FunctinalInterface 사용한다.
		 * 
		 * 	3. 람다식의 문법
		 * 		==> 인터페이스를 활용한 익명클래스의 또 다른 표현식이라고 생각
		 * 		==> 메소드의 기능에 따라서 람다식 표현이 달라진다.
		 * 
		 * 			메소드 문법:
		 * 			public 리턴타입 메소드명([변수, 변수, ...]){
		 * 					문장;
		 * 					[return 값;]
		 * 			}
		 * 
		 * 		메소드 기능에 따른 종류 4가지
		 * 		가. 파라미터변수 없고 리턴값 없는 경우
		 * 		나. 파라미터변수 있고 리턴값 없는 경우
		 * 		다. 파라미터변수 없고 리턴값 있는 경우
		 * 		라. 파라미터변수 있고 리턴값 있는 경우
		 * 		==> 람다식 표현으로 만든다. (메소드의 기능에 따라서 표현식이 달라진다.)
		 * 
		 */
		
	}
}
